{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spelman Innovation Lab Documentation Welcome! .il_icon { width: 72px; } .foot_bar { border-radius: 0px; xbackground: #f0f0f0; padding: 10px; } .img-container { width: 288px; height: 288px; position: relative; xborder-radius: 100rem; xdisplay: flex; align-items: center; justify-content: center; margin-left: auto; margin-right: auto; display: block } .logo-container { width: 288px; height: 288px; xbackground: lightgreen; position: absolute; top: 0px; left: 0px; display: flex; align-items: center; justify-content: center } .icons-container { width: 288px; height: 288px; xbackground: pink; position: absolute; top: 0px; left: 0px } .icons-container { animation: rotate 30s linear infinite; transform-origin: center } .icon-box { width: 108px; height: 72px; transform-origin: center right; position: absolute; top: 72px } .icon-inner { width: 0px; height: 0px; } .icon_div { background-size: cover; width: 72px; height: 72px; animation: rotate 30s linear reverse infinite } .icon-box-1 { transform: rotate(0) } .icon-box-2 { transform: rotate(45deg) } .icon-inner-2 { transform: rotateZ(-45deg) } .icon-box-3 { transform: rotate(90deg) } .icon-inner-3 { transform: rotateZ(-90deg) } .icon-box-4 { transform: rotate(135deg) } .icon-inner-4 { transform: rotateZ(-135deg) } .icon-box-5 { transform: rotate(180deg) } .icon-inner-5 { transform: rotateZ(-180deg) } .icon-box-6 { transform: rotate(225deg) } .icon-inner-6 { transform: rotateZ(-225deg) } .icon-box-7 { transform: rotate(270deg) } .icon-inner-7 { transform: rotateZ(-270deg) } .icon-box-8 { transform: rotate(315deg) } .icon-inner-8 { transform: rotateZ(-315deg) } @keyframes rotate { 0% { transform: rotateZ(0) } 100% { transform: rotateZ(360deg) } }","title":"Home"},{"location":"1d_animation_blends/","text":"\ud83d\udcd8 Instructions for creating a simple 1d animation blend in Unity Animation blends in Unity are created using blend trees. Note Blend Trees are used for allowing multiple animations to be blended smoothly by incorporating parts of them all to varying degrees. The amount that each of the motions contributes to the final effect is controlled using a blending parameter. In order for the blended motion to make sense, the motions that are blended must be of similar (not identical) in nature and timing. https://docs.unity3d.com/Manual/class-BlendTree.html Begin with a downloaded character and 2 animations to be blended. For this example, we use the ybot character with \u201cStandard Walk\u201d and \u201cInjured Walk\u201d animations. We will create a blending parameter named injury which is a float that can take values from 0.0 to 1.0 inclusive. When injury is 0.0, the character should execute the \u201cStandard Walk\u201d animation. When injury is 1.0, the character should execute the \u201cInjured Walk\u201d animation. For values of injury between 0.0 and 1.0, the character should execute a proportional blend of the 2 animations. Single, 1D Blend Tree Step 1: Create Animator Controller Into an empty Unity 3D project, import the character asset and the 2 animations to be blended. Add the character to the scene (instantiate the character). Be sure the character asset\u2019s rig is set to \u201chumanoid\u201d. Drag an animation to the instantiated character in the Hierarchy window to create an animation controller for the character. Alternatively, in the \u201cAssets\u201d window, right click the character asset and \u201cCreate->Animator Controller\u201d. Name the controller appropriately. Then associate the controller with the instantiated character. See the figure below. You can then add the 2 animations to the controller. If you manually create the animator controller, you will need to associate it with the character through the character inspector. Step 2: Create a Blend Tree Create a blend tree in the Animator as shown in the figure below. Set it as the default state. Create a blending parameter by navigating to the Parameters window of the Animator and selecting \u201cFloat\u201d from the drop down menu as shown. Create a parameter named \u201cinjury\u201d. Then, delete the default \u201cBlend\u201d parameter if it is present. Step 3: Add Animations to the Blend Tree Double click on the blend tree in the base layer window to bring up the blend tree editor. You should see the blend parameter and a slide control. Right-click on the Blend Tree and select \u201cAdd Motion\u201d to add our first motion to be blended. Add the \u201cStandard Walk\u201d motion. Repeat the last 2 steps to add the \u201cInjured Walk\u201d motion. You should now be able to execute the project and observe the blended animation. Change the value of the injury blend parameter to verify that you can smoothly transition from one animation to the other. If your blended animation does not loop properly, make sure that both animations have the \u201cLoop Time\u201d option checked. Adding Transition States to/from the Blend Trees Step 4: Add the Individual Animations Add the \u201cStandard Walk\u201d and \u201cInjured Walk\u201d animations to the base layout and set the \u201cStandard Walk\u201d animation as the default state. Now create transitions to and from the blend state as shown. We want to configure the animations in the following way: for values of injury < 0.1, we should be in the \u201cStandard Walk\u201d state. For values of injury > 0.9, we should be in the \u201cInjury Walk\u201d state. For values of injury between 0.1 and 0.9, we should be in the blend state. Select the individual transitions for edit by clicking on its representative arrow. In the image shown, the transition from \u201cStandard Walk\u201d to the blend tree is set to \u201cinjury > 0.1\u201d. Repeat a similar process for the other 3 transitions. You should now be able to see the animation transition between \u201cStandard Walk\u201d, \u201cInjured Walk\u201d and the blend tree as the value of injury changes. Step 5: Keyboard controls You can use keyboard inputs to change the value of injury at runtime. Create a script (called SetInjury in this example) and associate it with the character. Here is the contents of the script: using System.Collections; using System.Collections.Generic; using UnityEngine; public class SetInjury : MonoBehaviour { Animator animator; const float injuryInc = 0.01f; // Start is called before the first frame update void Start() { animator = GetComponent<Animator>(); } // Update is called once per frame void Update() { if (Input.GetKey(KeyCode.RightArrow)) { float injury = animator.GetFloat(\"injury\"); injury = injury + injuryInc; if (injury > 1.0f) injury = 1.0f; animator.SetFloat(\"injury\", injury); } if (Input.GetKey(KeyCode.LeftArrow)) { float injury = animator.GetFloat(\"injury\"); injury = injury - injuryInc; if (injury < 0.0f) injury = 0.0f; animator.SetFloat(\"injury\", injury); } } }","title":"Instructions for creating a simple 1d animation blend in Unity"},{"location":"1d_animation_blends/#instructions-for-creating-a-simple-1d-animation-blend-in-unity","text":"Animation blends in Unity are created using blend trees. Note Blend Trees are used for allowing multiple animations to be blended smoothly by incorporating parts of them all to varying degrees. The amount that each of the motions contributes to the final effect is controlled using a blending parameter. In order for the blended motion to make sense, the motions that are blended must be of similar (not identical) in nature and timing. https://docs.unity3d.com/Manual/class-BlendTree.html Begin with a downloaded character and 2 animations to be blended. For this example, we use the ybot character with \u201cStandard Walk\u201d and \u201cInjured Walk\u201d animations. We will create a blending parameter named injury which is a float that can take values from 0.0 to 1.0 inclusive. When injury is 0.0, the character should execute the \u201cStandard Walk\u201d animation. When injury is 1.0, the character should execute the \u201cInjured Walk\u201d animation. For values of injury between 0.0 and 1.0, the character should execute a proportional blend of the 2 animations.","title":"&#x1F4D8; Instructions for creating a simple 1d animation blend in Unity"},{"location":"1d_animation_blends/#single-1d-blend-tree","text":"Step 1: Create Animator Controller Into an empty Unity 3D project, import the character asset and the 2 animations to be blended. Add the character to the scene (instantiate the character). Be sure the character asset\u2019s rig is set to \u201chumanoid\u201d. Drag an animation to the instantiated character in the Hierarchy window to create an animation controller for the character. Alternatively, in the \u201cAssets\u201d window, right click the character asset and \u201cCreate->Animator Controller\u201d. Name the controller appropriately. Then associate the controller with the instantiated character. See the figure below. You can then add the 2 animations to the controller. If you manually create the animator controller, you will need to associate it with the character through the character inspector. Step 2: Create a Blend Tree Create a blend tree in the Animator as shown in the figure below. Set it as the default state. Create a blending parameter by navigating to the Parameters window of the Animator and selecting \u201cFloat\u201d from the drop down menu as shown. Create a parameter named \u201cinjury\u201d. Then, delete the default \u201cBlend\u201d parameter if it is present. Step 3: Add Animations to the Blend Tree Double click on the blend tree in the base layer window to bring up the blend tree editor. You should see the blend parameter and a slide control. Right-click on the Blend Tree and select \u201cAdd Motion\u201d to add our first motion to be blended. Add the \u201cStandard Walk\u201d motion. Repeat the last 2 steps to add the \u201cInjured Walk\u201d motion. You should now be able to execute the project and observe the blended animation. Change the value of the injury blend parameter to verify that you can smoothly transition from one animation to the other. If your blended animation does not loop properly, make sure that both animations have the \u201cLoop Time\u201d option checked.","title":"Single, 1D Blend Tree"},{"location":"1d_animation_blends/#adding-transition-states-tofrom-the-blend-trees","text":"Step 4: Add the Individual Animations Add the \u201cStandard Walk\u201d and \u201cInjured Walk\u201d animations to the base layout and set the \u201cStandard Walk\u201d animation as the default state. Now create transitions to and from the blend state as shown. We want to configure the animations in the following way: for values of injury < 0.1, we should be in the \u201cStandard Walk\u201d state. For values of injury > 0.9, we should be in the \u201cInjury Walk\u201d state. For values of injury between 0.1 and 0.9, we should be in the blend state. Select the individual transitions for edit by clicking on its representative arrow. In the image shown, the transition from \u201cStandard Walk\u201d to the blend tree is set to \u201cinjury > 0.1\u201d. Repeat a similar process for the other 3 transitions. You should now be able to see the animation transition between \u201cStandard Walk\u201d, \u201cInjured Walk\u201d and the blend tree as the value of injury changes. Step 5: Keyboard controls You can use keyboard inputs to change the value of injury at runtime. Create a script (called SetInjury in this example) and associate it with the character. Here is the contents of the script: using System.Collections; using System.Collections.Generic; using UnityEngine; public class SetInjury : MonoBehaviour { Animator animator; const float injuryInc = 0.01f; // Start is called before the first frame update void Start() { animator = GetComponent<Animator>(); } // Update is called once per frame void Update() { if (Input.GetKey(KeyCode.RightArrow)) { float injury = animator.GetFloat(\"injury\"); injury = injury + injuryInc; if (injury > 1.0f) injury = 1.0f; animator.SetFloat(\"injury\", injury); } if (Input.GetKey(KeyCode.LeftArrow)) { float injury = animator.GetFloat(\"injury\"); injury = injury - injuryInc; if (injury < 0.0f) injury = 0.0f; animator.SetFloat(\"injury\", injury); } } }","title":"Adding Transition States to/from the Blend Trees"},{"location":"Unity_and_GitHub/","text":"\ud83d\udcd8 Instructions for using GitHub with Unity Personal For Unity Personal, GitHub integration is not included. This guide explains how to use GitHub with Unity Personal. The guide is written for Mac users, but the outlined procedure should be similar for Windows users. A prerequisite for this guide is having the GitHub Desktop application installed on your system. You may download GitHub Desktop here . Begin by selecting an existing Unity project that you want to put under GitHub control. If you are creating a new project, create the project before creating the repository for it. Unity will not create a project in an existing directory. For this example, assume we have created a Unity project in the directory /Users/Laura/Documents/myProject Follow the steps below to get the project under GitHub control: Step 1: From the GitHub Desktop interface, select \u201cCreate New Repository\u201d Step 2: Refer to the figure below to fill in the popup window that appears. Enter the parent directory of the existing Unity project in the Local Path field. In our example case, that would be /Users/Laura/Documents Enter the name of the existing Unity project directory in the Name field. In our case, that would be myProject Check the initialize with README box if you want to create a REAME.md for your repository (not required, but a good practice). Be certain to select Unity in the Git Ignore field. If you neglect to do this, you will have to go find an appropriate .gitignore file to include. Also, all the superfluous files will be included with the initial import. Bottom line: don\u2019t forget to do this . Click on Create Repository to create the repository. Done. If you are logged into your GitHub a/c, you should be immediately able to push the new repository to GitHub. Step 3: (optional; for Mac users only) Mac users may consider adding the following to their .gitignore files: # OS generated files # ###################### .DS_Store .DS_Store? .Spotlight-V100 .Trashes ehthumbs.db Thumbs.db MacOS generates a number of temporary files (some hidden, some not) that you will not want to add to your repository. Besides taking up space, these files will make it difficult for you to tell whether the local files you care about are synced to your repository. To avoid this, simply cut and paste the lines above to the end of your .gitignore file.","title":"Unity & GitHub"},{"location":"Unity_and_GitHub/#instructions-for-using-github-with-unity-personal","text":"For Unity Personal, GitHub integration is not included. This guide explains how to use GitHub with Unity Personal. The guide is written for Mac users, but the outlined procedure should be similar for Windows users. A prerequisite for this guide is having the GitHub Desktop application installed on your system. You may download GitHub Desktop here . Begin by selecting an existing Unity project that you want to put under GitHub control. If you are creating a new project, create the project before creating the repository for it. Unity will not create a project in an existing directory. For this example, assume we have created a Unity project in the directory /Users/Laura/Documents/myProject Follow the steps below to get the project under GitHub control: Step 1: From the GitHub Desktop interface, select \u201cCreate New Repository\u201d Step 2: Refer to the figure below to fill in the popup window that appears. Enter the parent directory of the existing Unity project in the Local Path field. In our example case, that would be /Users/Laura/Documents Enter the name of the existing Unity project directory in the Name field. In our case, that would be myProject Check the initialize with README box if you want to create a REAME.md for your repository (not required, but a good practice). Be certain to select Unity in the Git Ignore field. If you neglect to do this, you will have to go find an appropriate .gitignore file to include. Also, all the superfluous files will be included with the initial import. Bottom line: don\u2019t forget to do this . Click on Create Repository to create the repository. Done. If you are logged into your GitHub a/c, you should be immediately able to push the new repository to GitHub. Step 3: (optional; for Mac users only) Mac users may consider adding the following to their .gitignore files: # OS generated files # ###################### .DS_Store .DS_Store? .Spotlight-V100 .Trashes ehthumbs.db Thumbs.db MacOS generates a number of temporary files (some hidden, some not) that you will not want to add to your repository. Besides taking up space, these files will make it difficult for you to tell whether the local files you care about are synced to your repository. To avoid this, simply cut and paste the lines above to the end of your .gitignore file.","title":"&#x1F4D8; Instructions for using GitHub with Unity Personal"},{"location":"controllable_char_with_SA/","text":"\ud83d\udcd8 Creating Controllable Characters with Unity Standard Assets In this exercise, you will create a keyboard- and joystick-controllable third person character using the Unity Standard Assets. This guide uses Standard Assets 2018.4.1 running on Unity 2019.4.16f1 Personal . Begin by downloading the character you want to use for this exercise. Follow Steps 1 and 3 of the \u201c Instructions for downloading characters and animations from mixamo.com \u201d guide to download your character. You can also download characters from the Unity store or from other online sources. This guide makes use of the Standard Assets (SA) package created by Unity and made available for free through the Unity Assets Store. The SAs provide resources to quickly complete common tasks. We will be using it to create a third-person character that you will be able to control with the keyboard or with a joystick. This is a three part guide. Do part I first. You can do parts II or III in any order. Part I - Create a 3rd Person Controller Create a new 3D project We will need two resources from the SA package: CrossPlatformInput and ThirdPersonCharacter Navigate to the Asset Store: Window->Asset Store and search for the Unity Standard Assets. Once you have the package, select \u201cImport\u201d to bring it into the current project. 5. You will be shown a menu of resources within the SA package available for import. While you can import everything, this will result in a larger than necessary project directory (always be mindful of disk space when working with Unity). For Part I of this guide, you need to import only 2 things: ThirdPersonCharacter and CrossPlatformInput : Standard Assets->CrossPlatformInput Standard Assets->Characters->ThirdPersonCharacter Tip For Part II, we will need the Cameras resource. You may want to import it now to save time later. From the ThirdPersonCharacter folder, instantiate a ThirdPersonController by dragging the ThirdPersonController to the Hierarchy Window. ( Assets->StandardAssets->Characters->ThirdPersonCharacter->Prefabs->ThirdPersonController ) This will create the character \u201cEthan\u201d that should be visible in the scene. If you run the project, you will notice that Ethan simply falls out of view. This is because the character is subject to gravity. To fix this, we need to create a floor. Instantiate a cube. Flatten and stretch it to create a floor. For example, you might scale it in its transform window with the X and Z scales set to 100 and the Y scale set to 0.1. However you scale it, position it so that it is immediately below Ethan\u2019s feet. 9. Now run the project again. This time, Ethan has a floor beneath his feet. You should be able to control him with the keyboard arrows or with a joystick. Use \u2018C\u2019 to crouch down and use the spacebar to jump. Use the left shift key to make him walk. Part II - Add a 3rd Player Camera In this part, we will replace the default static camera with a 3rd player camera that will follow the player around. If you hadn\u2019t already done so in Step 5 of Part I, add a third SA asset to the project: Cameras (\u201cStandard Assets->Cameras\u201d) Delete the \u201cMain Camera\u201d from the project hierarchy Instantiate a \u201cmultipurpose camera rig\u201d to the hierarchy. From the Assets window, ( Assets->StandardAssets->Cameras->Prefabs->MultipuposeCameraRig ) Tag the ThirdPersonController as the \u201cPlayer\u201d in the Inspector. This is how the camera knows what to follow. 5. Run the project again. Note how the camera follows the player. Feel free to experiment with the other available cameras. Note that the first person camera requires importing Standard Assets->Utility . Part III - Replace the Default Character In this part, we will replace Ethan with a character of our choice. Import a rigged humanoid character model into the project. Be certain that your character\u2019s Rig is set to \u201chumanoid\u201d. For this example, we have imported a character named Louise who we will use to replace Ethan. The ThirdPersonController is a prefab. Think of it as a zip file that contains other files. Just like you can\u2019t modify the contents of a zip file without unzipping it, you can\u2019t modify the contents of a prefab without \u201cunpacking\u201d it. The Ethan character is contained inside the ThirdPersonController prefab. In order to replace Ethan with Louise, we must unpack the prefab. In the hierarchy window, right-click on the ThirdPersonController and select \u201cUnpack Prefab\u201d. Once the prefab is unpacked, instantiate a copy of Louise inside the unpacked prefab Now, delete the 3 files (EthanBody, EthanModel, EthanSkeleton) that comprise the Ethan character. Step 3 Step 4 Finally, we need to tell the ThirdPersonController to use out new character model In the Inspector, for the ThirdPersonController, set the Animator Avatar to the avatar of the new character model. In the Inspector, for the new character model, assure that the Animator Controller is set to \u2018None\u2019 and that the model\u2019s avatar is correctly set. You should now be able to run the project and control your new character.","title":"Creating Controllable Characters with Unity Standard Assets"},{"location":"controllable_char_with_SA/#creating-controllable-characters-with-unity-standard-assets","text":"In this exercise, you will create a keyboard- and joystick-controllable third person character using the Unity Standard Assets. This guide uses Standard Assets 2018.4.1 running on Unity 2019.4.16f1 Personal . Begin by downloading the character you want to use for this exercise. Follow Steps 1 and 3 of the \u201c Instructions for downloading characters and animations from mixamo.com \u201d guide to download your character. You can also download characters from the Unity store or from other online sources. This guide makes use of the Standard Assets (SA) package created by Unity and made available for free through the Unity Assets Store. The SAs provide resources to quickly complete common tasks. We will be using it to create a third-person character that you will be able to control with the keyboard or with a joystick. This is a three part guide. Do part I first. You can do parts II or III in any order.","title":"&#x1F4D8; Creating Controllable Characters with Unity Standard Assets"},{"location":"controllable_char_with_SA/#part-i-create-a-3rd-person-controller","text":"Create a new 3D project We will need two resources from the SA package: CrossPlatformInput and ThirdPersonCharacter Navigate to the Asset Store: Window->Asset Store and search for the Unity Standard Assets. Once you have the package, select \u201cImport\u201d to bring it into the current project. 5. You will be shown a menu of resources within the SA package available for import. While you can import everything, this will result in a larger than necessary project directory (always be mindful of disk space when working with Unity). For Part I of this guide, you need to import only 2 things: ThirdPersonCharacter and CrossPlatformInput : Standard Assets->CrossPlatformInput Standard Assets->Characters->ThirdPersonCharacter Tip For Part II, we will need the Cameras resource. You may want to import it now to save time later. From the ThirdPersonCharacter folder, instantiate a ThirdPersonController by dragging the ThirdPersonController to the Hierarchy Window. ( Assets->StandardAssets->Characters->ThirdPersonCharacter->Prefabs->ThirdPersonController ) This will create the character \u201cEthan\u201d that should be visible in the scene. If you run the project, you will notice that Ethan simply falls out of view. This is because the character is subject to gravity. To fix this, we need to create a floor. Instantiate a cube. Flatten and stretch it to create a floor. For example, you might scale it in its transform window with the X and Z scales set to 100 and the Y scale set to 0.1. However you scale it, position it so that it is immediately below Ethan\u2019s feet. 9. Now run the project again. This time, Ethan has a floor beneath his feet. You should be able to control him with the keyboard arrows or with a joystick. Use \u2018C\u2019 to crouch down and use the spacebar to jump. Use the left shift key to make him walk.","title":"Part I - Create a 3rd Person Controller"},{"location":"controllable_char_with_SA/#part-ii-add-a-3rd-player-camera","text":"In this part, we will replace the default static camera with a 3rd player camera that will follow the player around. If you hadn\u2019t already done so in Step 5 of Part I, add a third SA asset to the project: Cameras (\u201cStandard Assets->Cameras\u201d) Delete the \u201cMain Camera\u201d from the project hierarchy Instantiate a \u201cmultipurpose camera rig\u201d to the hierarchy. From the Assets window, ( Assets->StandardAssets->Cameras->Prefabs->MultipuposeCameraRig ) Tag the ThirdPersonController as the \u201cPlayer\u201d in the Inspector. This is how the camera knows what to follow. 5. Run the project again. Note how the camera follows the player. Feel free to experiment with the other available cameras. Note that the first person camera requires importing Standard Assets->Utility .","title":"Part II - Add a 3rd Player Camera"},{"location":"controllable_char_with_SA/#part-iii-replace-the-default-character","text":"In this part, we will replace Ethan with a character of our choice. Import a rigged humanoid character model into the project. Be certain that your character\u2019s Rig is set to \u201chumanoid\u201d. For this example, we have imported a character named Louise who we will use to replace Ethan. The ThirdPersonController is a prefab. Think of it as a zip file that contains other files. Just like you can\u2019t modify the contents of a zip file without unzipping it, you can\u2019t modify the contents of a prefab without \u201cunpacking\u201d it. The Ethan character is contained inside the ThirdPersonController prefab. In order to replace Ethan with Louise, we must unpack the prefab. In the hierarchy window, right-click on the ThirdPersonController and select \u201cUnpack Prefab\u201d. Once the prefab is unpacked, instantiate a copy of Louise inside the unpacked prefab Now, delete the 3 files (EthanBody, EthanModel, EthanSkeleton) that comprise the Ethan character. Step 3 Step 4 Finally, we need to tell the ThirdPersonController to use out new character model In the Inspector, for the ThirdPersonController, set the Animator Avatar to the avatar of the new character model. In the Inspector, for the new character model, assure that the Animator Controller is set to \u2018None\u2019 and that the model\u2019s avatar is correctly set. You should now be able to run the project and control your new character.","title":"Part III - Replace the Default Character"},{"location":"fixing_missing_textures/","text":"\ud83d\udcd8 Instructions for fixing missing mixamo character textures At times, your imported mixamo model may show no texture. Here is an example: Rest assured: mixamo models have built-in textures! (models from other sites may have external textures or no textures at all. Those may require a different solution than the one presented here.) Step 1: Create a home for your model\u2019s textures Create a folder named \u201cTextures\u201d in the same directory where the downloaded model is. The folder must be named \u201cTextures\u201d. You may rename and move it later, but by default, this is where Unity will look for textures for your model. Step 2: Extract your model\u2019s textures Select the model in the \u201cAssets\u201d window (not its instance in the Hierarchy). In the Inspector, select \u201cMaterials\u201d then \u201cExtract Textures\u201d. Then, when prompted, select the folder you created in step 1 as the destination for your extracted textures. If everything went right, your model should now be properly textured. If a dialog box pops up warning you of unmarked textures used as normal maps, simply accept the recommended changes by selecting \u201cFix now\u201d.","title":"Instructions for fixing missing mixamo character textures"},{"location":"fixing_missing_textures/#instructions-for-fixing-missing-mixamo-character-textures","text":"At times, your imported mixamo model may show no texture. Here is an example: Rest assured: mixamo models have built-in textures! (models from other sites may have external textures or no textures at all. Those may require a different solution than the one presented here.) Step 1: Create a home for your model\u2019s textures Create a folder named \u201cTextures\u201d in the same directory where the downloaded model is. The folder must be named \u201cTextures\u201d. You may rename and move it later, but by default, this is where Unity will look for textures for your model. Step 2: Extract your model\u2019s textures Select the model in the \u201cAssets\u201d window (not its instance in the Hierarchy). In the Inspector, select \u201cMaterials\u201d then \u201cExtract Textures\u201d. Then, when prompted, select the folder you created in step 1 as the destination for your extracted textures. If everything went right, your model should now be properly textured. If a dialog box pops up warning you of unmarked textures used as normal maps, simply accept the recommended changes by selecting \u201cFix now\u201d.","title":"&#x1F4D8; Instructions for fixing missing mixamo character textures"},{"location":"mixamo_characters_and_animations/","text":"\ud83d\udcd8 Mixamo Characters and Animations This is a 2-part guide. It covers how to download humanoid characters and animations from the website mixamo.com. I believe all the mixamo characters are humanoid, meaning that they are all rigged in the same way. Note Skeletal animation or rigging is a technique in computer animation in which a character (or other articulated object) is represented in two parts: a surface representation used to draw the character, called the mesh or skin and a hierarchical set of interconnected parts called bones , skeleton or rig . href=https://en.wikipedia.org/wiki/Skeletal_animation We will download characters and animations separately. That way, we can download our characters one time, then apply any future animation we want to that character. I recommend creating a mixamo folder somewhere on your hard drive to store your character, if you want to use the same character in multiple projects. This folder should be outside of any Unity project. Give it any name you choose. Assets stored here will be project independent. We will refer to this folder as your \u201cmixamo folder\u201d. Tip: You will want to organize this folder into sub-folders by character and animation. Downloading a Character From Mixamo Step 1: Download your character Go to mixamo.com. Login. Select the character you wish to download. Unselect all animations on the character. Your character should be in the T position. Click \u201cDownload\u201d. Your download options should include only \u201cFormat\u201d and \u201cPose\u201d. If you see options for \u201cFrames per Second\u201d, \u201cSkin\u201d or \u201cKeyframe Reduction\u201d, you have an associated animation with your character. Select \u201cFBX for Unity\u201d for the Format. \u201cT-Pose\u201d should be selected for the Pose. Save the .FBX file to your mixamo folder Step 2: Set your character\u2019s rig to humanoid Import your character from Step 1 into Unity. If your character\u2019s color does not load properly, select the character asset (not the instance) and click on \u201cExtract Textures\u201d under the Materials tab in the Inspector window. When prompted, store the extracted textures (image files) to a subfolder named \u201cTextures\u201d. You can create this folder before extracting or at the time of extraction. See \u201c Mixamo Textures MIA \u201d for more details. Select the character. In the Inspector window, select the \u201cRig\u201d tab and set the \u201cAnimation Type\u201d to \u201cHumanoid\u201d. Click \u201cApply\u201d. See the figure below. Extra steps for \u201cscary\u201d models At times, your imported model may not look right. In these cases, the most notable oddity are the eye sockets. See the example below. Pretty scary, Huh? This is an issue with the default material shader. As you can see, the shader is \u201cTransparent\u201d, allowing us to see through parts of the model. In the image above, we see the eye sockets, and the lower jaw through the model\u2019s skin. If you run into this type of issue, refer to the Mixamo Model Texture & Shading Problems guide. Downloading Animations From Mixamo Step 3: Download an Animation Go to mixamo.com and select any character. \u201cX Bot\u201d or \u201cY Bot\u201d are recommended for this purpose because they generate smaller download files. The character is just a carrier for the animation we want to acquire and will eventually be discarded. Select the animation you wish to download If the animation has a root transform , you will see an \u201cIn Place\u201d checkbox as part of the animation option. If unsure, select this as shown in the image below. A root transform causes the animation to automatically translate during the course of the animation. For example, a root transformation would cause a walking animation to actually travel. Selecting \u201cIn Place\u201d causes the animation to cycle without displacing the character. This is probably the behavior you want. Click download. 4 download options should present themselves (see the figure below). Select \u201cFBX for Unity\u201d for the Format. Select 30 for the Frames per Second. Higher frame rates will result in smoother animations at the cost of larger files. Set \u201cKeyframe Reduction\u201d to None. Set the \u201cSkin\u201d to \u201cwithout skin\u201d. We are interested in the animation only. Omitting the skin will result in a much reduced download size. Save the .FBX file in your mixamo folder Repeat Step 3 for each animation you want to download Step 4: Extract the animation from the FBX file Import your animation from Step 3 into Unity. Note that the FBX contains only a rig and an animation asset (no character) as shown below. Select the top-level asset and once more, set the Rig type to \u201cHumanoid\u201d and click Apply. Your imported asset should now contain a humanoid avatar. See the image below. We can now extract the animation and discard this FBX file. This will reduce the size of our project. To do this, select the animation (the animation only, not the entire asset) and click \u2318-D (or Ctrl-D on a Windows machine) to \u201cduplicate\u201d the animation. Note that you must set the rig to humanoid before duplicating the animation for the animation to work with other humanoid avatars. Now, delete the entire imported asset, leaving only the duplicated animation. This animation can now be applied to any humanoid asset. In your project folder, there should be a newly created .anim file. If your animation was a walking animation, for example, this file might be called walking.anim. You can save a copy of this file in your mixamo folder. It can be imported into future Unity projects and used with any other humanoid character. (Hint: right-clicking on the animation allows you to \u201cReveal in Finder\u201d). Step 5: Apply the animation to the character Instantiate the character asset from Part I to create a GameObject instance in the project window. We can apply our animation to any humanoid character by simply dragging and dropping it onto an instantiated humanoid character in the project window. Note that if you apply the animation to a character before you set the character rig to \u201chumanoid\u201d, you will have to attach the avatar to the animator manually. This is shown below. In other words, when you apply the animation to a humanoid character, an Animator is created and a reference to the character\u2019s avatar is automatically set in the animator. If you apply the animation to a non-humanoid character (or a character whose rig you haven\u2019t already set to \u201chumanoid\u201d), then the automatic association to the character\u2019s humanoid avatar is not set. You will have to set it manually after to change the character\u2019s rig to \u201chumanoid\u201d. Select the instance of the character asset in the Hierarchy window to bring up the character inspector.","title":"Mixamo Characters and Animations"},{"location":"mixamo_characters_and_animations/#mixamo-characters-and-animations","text":"This is a 2-part guide. It covers how to download humanoid characters and animations from the website mixamo.com. I believe all the mixamo characters are humanoid, meaning that they are all rigged in the same way. Note Skeletal animation or rigging is a technique in computer animation in which a character (or other articulated object) is represented in two parts: a surface representation used to draw the character, called the mesh or skin and a hierarchical set of interconnected parts called bones , skeleton or rig . href=https://en.wikipedia.org/wiki/Skeletal_animation We will download characters and animations separately. That way, we can download our characters one time, then apply any future animation we want to that character. I recommend creating a mixamo folder somewhere on your hard drive to store your character, if you want to use the same character in multiple projects. This folder should be outside of any Unity project. Give it any name you choose. Assets stored here will be project independent. We will refer to this folder as your \u201cmixamo folder\u201d. Tip: You will want to organize this folder into sub-folders by character and animation.","title":"&#x1F4D8; Mixamo Characters and Animations"},{"location":"mixamo_characters_and_animations/#downloading-a-character-from-mixamo","text":"","title":"Downloading a Character From Mixamo"},{"location":"mixamo_characters_and_animations/#step-1-download-your-character","text":"Go to mixamo.com. Login. Select the character you wish to download. Unselect all animations on the character. Your character should be in the T position. Click \u201cDownload\u201d. Your download options should include only \u201cFormat\u201d and \u201cPose\u201d. If you see options for \u201cFrames per Second\u201d, \u201cSkin\u201d or \u201cKeyframe Reduction\u201d, you have an associated animation with your character. Select \u201cFBX for Unity\u201d for the Format. \u201cT-Pose\u201d should be selected for the Pose. Save the .FBX file to your mixamo folder","title":"Step 1: Download your character"},{"location":"mixamo_characters_and_animations/#step-2-set-your-characters-rig-to-humanoid","text":"Import your character from Step 1 into Unity. If your character\u2019s color does not load properly, select the character asset (not the instance) and click on \u201cExtract Textures\u201d under the Materials tab in the Inspector window. When prompted, store the extracted textures (image files) to a subfolder named \u201cTextures\u201d. You can create this folder before extracting or at the time of extraction. See \u201c Mixamo Textures MIA \u201d for more details. Select the character. In the Inspector window, select the \u201cRig\u201d tab and set the \u201cAnimation Type\u201d to \u201cHumanoid\u201d. Click \u201cApply\u201d. See the figure below. Extra steps for \u201cscary\u201d models At times, your imported model may not look right. In these cases, the most notable oddity are the eye sockets. See the example below. Pretty scary, Huh? This is an issue with the default material shader. As you can see, the shader is \u201cTransparent\u201d, allowing us to see through parts of the model. In the image above, we see the eye sockets, and the lower jaw through the model\u2019s skin. If you run into this type of issue, refer to the Mixamo Model Texture & Shading Problems guide.","title":"Step 2: Set your character\u2019s rig to humanoid"},{"location":"mixamo_characters_and_animations/#downloading-animations-from-mixamo","text":"","title":"Downloading Animations From Mixamo"},{"location":"mixamo_characters_and_animations/#step-3-download-an-animation","text":"Go to mixamo.com and select any character. \u201cX Bot\u201d or \u201cY Bot\u201d are recommended for this purpose because they generate smaller download files. The character is just a carrier for the animation we want to acquire and will eventually be discarded. Select the animation you wish to download If the animation has a root transform , you will see an \u201cIn Place\u201d checkbox as part of the animation option. If unsure, select this as shown in the image below. A root transform causes the animation to automatically translate during the course of the animation. For example, a root transformation would cause a walking animation to actually travel. Selecting \u201cIn Place\u201d causes the animation to cycle without displacing the character. This is probably the behavior you want. Click download. 4 download options should present themselves (see the figure below). Select \u201cFBX for Unity\u201d for the Format. Select 30 for the Frames per Second. Higher frame rates will result in smoother animations at the cost of larger files. Set \u201cKeyframe Reduction\u201d to None. Set the \u201cSkin\u201d to \u201cwithout skin\u201d. We are interested in the animation only. Omitting the skin will result in a much reduced download size. Save the .FBX file in your mixamo folder Repeat Step 3 for each animation you want to download","title":"Step 3: Download an Animation"},{"location":"mixamo_characters_and_animations/#step-4-extract-the-animation-from-the-fbx-file","text":"Import your animation from Step 3 into Unity. Note that the FBX contains only a rig and an animation asset (no character) as shown below. Select the top-level asset and once more, set the Rig type to \u201cHumanoid\u201d and click Apply. Your imported asset should now contain a humanoid avatar. See the image below. We can now extract the animation and discard this FBX file. This will reduce the size of our project. To do this, select the animation (the animation only, not the entire asset) and click \u2318-D (or Ctrl-D on a Windows machine) to \u201cduplicate\u201d the animation. Note that you must set the rig to humanoid before duplicating the animation for the animation to work with other humanoid avatars. Now, delete the entire imported asset, leaving only the duplicated animation. This animation can now be applied to any humanoid asset. In your project folder, there should be a newly created .anim file. If your animation was a walking animation, for example, this file might be called walking.anim. You can save a copy of this file in your mixamo folder. It can be imported into future Unity projects and used with any other humanoid character. (Hint: right-clicking on the animation allows you to \u201cReveal in Finder\u201d).","title":"Step 4: Extract the animation from the FBX file"},{"location":"mixamo_characters_and_animations/#step-5-apply-the-animation-to-the-character","text":"Instantiate the character asset from Part I to create a GameObject instance in the project window. We can apply our animation to any humanoid character by simply dragging and dropping it onto an instantiated humanoid character in the project window. Note that if you apply the animation to a character before you set the character rig to \u201chumanoid\u201d, you will have to attach the avatar to the animator manually. This is shown below. In other words, when you apply the animation to a humanoid character, an Animator is created and a reference to the character\u2019s avatar is automatically set in the animator. If you apply the animation to a non-humanoid character (or a character whose rig you haven\u2019t already set to \u201chumanoid\u201d), then the automatic association to the character\u2019s humanoid avatar is not set. You will have to set it manually after to change the character\u2019s rig to \u201chumanoid\u201d. Select the instance of the character asset in the Hierarchy window to bring up the character inspector.","title":"Step 5: Apply the animation to the character"},{"location":"mixamo_texture_and_shading_problems/","text":"\ud83d\udcd8 Mixamo Model Texture & Shading Problems Extra steps for \u201cfunky\u201d models At times, your imported model may not look right. In these cases, the most notable oddity are the eye sockets. Here is an example: Pretty scary, Huh? This is an issue with the default material shader. As you can see, the shader is \u201cTransparent\u201d, allowing us to see through parts of the model. In the image above, we see the eye sockets, and the lower jaw through the model\u2019s skin. Another common problem is missing or unapplied textures. Here is an example: In this case, the shading is fine, but no texture has been applied to the model. We can categorize texture and shading problems into 4 cases as shown below: Case A improperly textured, improperly shaded Case B properly textured, improperly shaded Case C improperly textured, properly shaded Case D properly textured, properly shaded Case D above is a properly textured and shaded model. This is what we hope to see when we import a model. Case B is fairly common. In this case, the model is properly textured (properly colored), but improperly shaded. Some of the material shaders should be \u201copaque\u201d, but are \u201ctransparent\u201d. Case C is also common. Here, the model is properly shaded (opacities are correct), but no texture is applied. Case A is the most difficult. Here, the model is neither properly shaded nor textured. Addressing rendering issues When confronted with a model with both shading and texturing problems (case A), begin by fixing the texturing problem. In other words, go from A->B->D rather than A->C->D. Fixing texturing issues You can fix most texturing issues by following the instructions in the \u201c Instructions for fixing missing mixamo character textures \u201d guide. Texturing issues are shown in Cases A and C above. Fixing Shading issues Shading issues are shown in Cases A and B above. The fix is to change the shader rendering mode for each of the model\u2019s materials from \u201cTransparent\u201d to \u201cOpaque\u201d. How we do this depends on whether or not your model is using materials that are external to the model file. If your model was not textured on import, follow the direction above to get it textured. In the process of fixing the texturing issue, you will have created an external copy of the model\u2019s materials. This is required to fix the shading issue. If, on the other hand, your model was properly textured on import but has a shading problem (case B), then your model is using embedded materials. Unfortunately, we can\u2019t change the shader for materials embedded in a prefab. Instead, we have to make copies of the materials, adjust their shaders then re-assign the new materials to the model. Follow the direction in the \u201c Instructions for fixing missing mixamo character textures \u201d guide to make an external copy of the model\u2019s materials. Once your materials are extracted, In the materials folder, select all materials In the inspector, change the shader from Transparent to Opaque ??","title":"Mixamo Model Texture & Shading Problems"},{"location":"mixamo_texture_and_shading_problems/#mixamo-model-texture-shading-problems","text":"","title":"&#x1F4D8; Mixamo Model Texture &amp; Shading Problems"},{"location":"mixamo_texture_and_shading_problems/#extra-steps-for-funky-models","text":"At times, your imported model may not look right. In these cases, the most notable oddity are the eye sockets. Here is an example: Pretty scary, Huh? This is an issue with the default material shader. As you can see, the shader is \u201cTransparent\u201d, allowing us to see through parts of the model. In the image above, we see the eye sockets, and the lower jaw through the model\u2019s skin. Another common problem is missing or unapplied textures. Here is an example: In this case, the shading is fine, but no texture has been applied to the model. We can categorize texture and shading problems into 4 cases as shown below: Case A improperly textured, improperly shaded Case B properly textured, improperly shaded Case C improperly textured, properly shaded Case D properly textured, properly shaded Case D above is a properly textured and shaded model. This is what we hope to see when we import a model. Case B is fairly common. In this case, the model is properly textured (properly colored), but improperly shaded. Some of the material shaders should be \u201copaque\u201d, but are \u201ctransparent\u201d. Case C is also common. Here, the model is properly shaded (opacities are correct), but no texture is applied. Case A is the most difficult. Here, the model is neither properly shaded nor textured.","title":"Extra steps for \u201cfunky\u201d models"},{"location":"mixamo_texture_and_shading_problems/#addressing-rendering-issues","text":"When confronted with a model with both shading and texturing problems (case A), begin by fixing the texturing problem. In other words, go from A->B->D rather than A->C->D. Fixing texturing issues You can fix most texturing issues by following the instructions in the \u201c Instructions for fixing missing mixamo character textures \u201d guide. Texturing issues are shown in Cases A and C above. Fixing Shading issues Shading issues are shown in Cases A and B above. The fix is to change the shader rendering mode for each of the model\u2019s materials from \u201cTransparent\u201d to \u201cOpaque\u201d. How we do this depends on whether or not your model is using materials that are external to the model file. If your model was not textured on import, follow the direction above to get it textured. In the process of fixing the texturing issue, you will have created an external copy of the model\u2019s materials. This is required to fix the shading issue. If, on the other hand, your model was properly textured on import but has a shading problem (case B), then your model is using embedded materials. Unfortunately, we can\u2019t change the shader for materials embedded in a prefab. Instead, we have to make copies of the materials, adjust their shaders then re-assign the new materials to the model. Follow the direction in the \u201c Instructions for fixing missing mixamo character textures \u201d guide to make an external copy of the model\u2019s materials. Once your materials are extracted, In the materials folder, select all materials In the inspector, change the shader from Transparent to Opaque ??","title":"Addressing rendering issues"},{"location":"template/","text":"\ud83d\udcd8 Template for creating a new Doc page Begin with a copy of this file. Name it appropriately. Then, create a directory to hold the media associated with the new page. For consistency, give the directory the same name as your newly created md file. So, for template.md , the directory will be template . Place template.md on the root directory (the directory that contains the top-level index.md file. Add an entry to mkdocs.yml that points to your .md file. Assume we have an image image1.jpg . Put this image in the template directory. Reference the image with a local path template\\image1.jpg in the following way: ![Alt text](template/image1.jpg?style=center50) The Alt text can be empty. The style has values like center50 , right30 , left10 , scale70 , etc. For these examples, the respective results would be \"image is centered and scaled at 50%\", \"image is right-aligned and scaled at 30%\", \"image is left aligned and scaled at 10%\" and \"image is scaled at 70%\". Note that in order to use these image style values, you must link to the appropriate css file at the top of your md file: <link rel=\"stylesheet\" href=\"../css/images.css\" /> Warning This is a warning for you. Note This is a note for you. Danger This is a danger notice for you. Important This is an important message for you. A few interesting Unicodes: RED APPLE: \ud83c\udf4e GREEN APPLE: \ud83c\udf4f BLUE HEART: \ud83d\udc99 GREEN HEART: \ud83d\udc9a YELLOW HEART: \ud83d\udc9b PURPLE HEART: \ud83d\udc9c GREEN BOOK: \ud83d\udcd7 BLUE BOOK: \ud83d\udcd8 ORANGE BOOK: \ud83d\udcd9 LARGE RED CIRCLE: \ud83d\udd34 LARGE BLUE CIRCLE: \ud83d\udd35 LARGE ORANGE DIAMOND: \ud83d\udd36 LARGE BLUE DIAMOND: \ud83d\udd37 SMALL ORANGE DIAMOND: \ud83d\udd38 SMALL BLUE DIAMOND: \ud83d\udd39 UP-POINTING RED TRIANGLE: \ud83d\udd3a DOWN-POINTING RED TRIANGLE: \ud83d\udd3b UP-POINTING SMALL RED TRIANGLE: \ud83d\udd3c DOWN-POINTING SMALL RED TRIANGLE: \ud83d\udd3d","title":"Template"},{"location":"template/#template-for-creating-a-new-doc-page","text":"Begin with a copy of this file. Name it appropriately. Then, create a directory to hold the media associated with the new page. For consistency, give the directory the same name as your newly created md file. So, for template.md , the directory will be template . Place template.md on the root directory (the directory that contains the top-level index.md file. Add an entry to mkdocs.yml that points to your .md file. Assume we have an image image1.jpg . Put this image in the template directory. Reference the image with a local path template\\image1.jpg in the following way: ![Alt text](template/image1.jpg?style=center50) The Alt text can be empty. The style has values like center50 , right30 , left10 , scale70 , etc. For these examples, the respective results would be \"image is centered and scaled at 50%\", \"image is right-aligned and scaled at 30%\", \"image is left aligned and scaled at 10%\" and \"image is scaled at 70%\". Note that in order to use these image style values, you must link to the appropriate css file at the top of your md file: <link rel=\"stylesheet\" href=\"../css/images.css\" /> Warning This is a warning for you. Note This is a note for you. Danger This is a danger notice for you. Important This is an important message for you. A few interesting Unicodes: RED APPLE: \ud83c\udf4e GREEN APPLE: \ud83c\udf4f BLUE HEART: \ud83d\udc99 GREEN HEART: \ud83d\udc9a YELLOW HEART: \ud83d\udc9b PURPLE HEART: \ud83d\udc9c GREEN BOOK: \ud83d\udcd7 BLUE BOOK: \ud83d\udcd8 ORANGE BOOK: \ud83d\udcd9 LARGE RED CIRCLE: \ud83d\udd34 LARGE BLUE CIRCLE: \ud83d\udd35 LARGE ORANGE DIAMOND: \ud83d\udd36 LARGE BLUE DIAMOND: \ud83d\udd37 SMALL ORANGE DIAMOND: \ud83d\udd38 SMALL BLUE DIAMOND: \ud83d\udd39 UP-POINTING RED TRIANGLE: \ud83d\udd3a DOWN-POINTING RED TRIANGLE: \ud83d\udd3b UP-POINTING SMALL RED TRIANGLE: \ud83d\udd3c DOWN-POINTING SMALL RED TRIANGLE: \ud83d\udd3d","title":"&#x1F4D8; Template for creating a new Doc page"}]}